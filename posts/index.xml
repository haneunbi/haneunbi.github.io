<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on B.log</title>
    <link>https://haneunbi.github.io/posts/</link>
    <description>B.log (Posts)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-KR</language>
    <lastBuildDate>Fri, 05 Jun 2020 19:27:13 +0900</lastBuildDate>
    
    <atom:link href="https://haneunbi.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[CSS] 박스 모델(Box-model)</title>
      <link>https://haneunbi.github.io/2020/06/05/css-box-model/</link>
      <pubDate>Fri, 05 Jun 2020 19:27:13 +0900</pubDate>
      
      <guid>https://haneunbi.github.io/2020/06/05/css-box-model/</guid>
      <description>&lt;p&gt;CSS의 레이아웃의 기본 중의 기본인 Box-model에 대해 다뤄보고자 한다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;문서의 레이아웃을 계산할 때, 브라우저의 렌더링 엔진은 표준 &lt;strong&gt;CSS 기본 박스 모델&lt;/strong&gt;에 따라 각각의 요소를 사각형 박스로 표현한다. CSS는 박스의 크기, 위치, 속성(색, 배경, 테두리 모양 등)을 결정한다. &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;정작 우리가 margin, border, padding, content가 무엇인 줄도 알고 실제로 잘 사용하고 있지만
이러한 레이아웃 개념을 통틀어 &lt;strong&gt;박스 모델&lt;/strong&gt;이라고 불리는 것을 모를 수(!)도 있다.
(혹은 입문 시절에 배워서 명칭 자체를 잊었거나..)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://haneunbi.github.io/img/css-box_model.png&#34; alt=&#34;The CSS box model&#34;&gt;
[그림 1] The CSS box model&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;postion&lt;/strong&gt; 속성 설정 후 top, left, rigith, bottom 좌표 지정을 시작으로(옵션),&lt;br&gt;
&lt;strong&gt;margin&lt;/strong&gt;(바깥 여백) &amp;gt; &lt;strong&gt;border&lt;/strong&gt;(테두리) &amp;gt; &lt;strong&gt;padding&lt;/strong&gt;(안쪽 여백) &amp;gt; &lt;strong&gt;content&lt;/strong&gt;(width, height) 가 존재한다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4 id=&#34;position-속성&#34;&gt;position 속성&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;static: (기본값) 다른 태그와의 관계에 의해 자동으로 배치되며 위치를 지정할 수 없음&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;relative&lt;/strong&gt;: 기존 좌표를 기준으로 위치 지정&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;absolute&lt;/strong&gt;: 절대 좌표(보통 부모 태그)를 기준으로 위치 지정&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;fixed&lt;/strong&gt;: 스크롤과 관계없이 문서의 최 좌측상단을 기준으로 좌표 고정&lt;br&gt;
*&lt;em&gt;position을 absolute/fixed로 설정 시 block 태그(width: 100%)의 특징이 사라짐&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;div style=&#34;margin:10px auto;padding:10px;width:176px;background-color:#ddd;border:2px solid;text-align:center&#34;&gt;200 X 100&lt;br&gt;&lt;small&gt;Content box&lt;/small&gt;&lt;/div&gt;
▲ 마진과 패딩값이 각각 10px이고 테두리가 2px인, 총 너비 200px인 사각형을 그려보자.
&lt;p&gt;마진값이야 사각형의 바깥 여백이기 때문에 무시하더라도
우리가 사각형이라고 인지하는 부분은 &lt;strong&gt;테두리&lt;/strong&gt;와 안쪽 여백인 &lt;strong&gt;패딩&lt;/strong&gt;과 &lt;strong&gt;콘텐츠 너비&lt;/strong&gt;의 합이다.
때문에 200px이라는 너비를 얻으려면 테두리 두께와 안쪽 여백을 고려해서 아래과 같이 width값을 작성해야 한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;box&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;margin&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;padding&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;width&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;176&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* padding 좌우 20px과 border 좌우 4px 빼기 */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;border&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;solid&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://haneunbi.github.io/img/css-box_model_sample.png&#34; alt=&#34;개발자도구를 통해 확인해볼 수 있는 레이아웃&#34;&gt;
▲ 크롬 개발자도구 Computed(스타일 계산 결과) 탭에서 위와 같이 확인해볼 수 있다.&lt;/p&gt;
&lt;p&gt;하지만 이것도 &lt;strong&gt;box-sizing&lt;/strong&gt; 속성을 지정하지 않거나 기본값인 &lt;em&gt;content-box&lt;/em&gt;를 설정한 경우를 말하고
별도로 &lt;em&gt;border-box&lt;/em&gt;값을 사용한다면 굳이 border와 padding값을 뺀 값이 아닌 아래와 같이 200px 그대로 width값을 작성해도 된다.
단, &lt;a href=&#34;https://developer.mozilla.org/ko/docs/Web/CSS/box-sizing&#34;  title=&#34;box-sizing - CSS: Cascading Style Sheets | MDN&#34;  target=&#34;_blank&#34; &gt;box-sizing&lt;/a&gt; 속성은 IE8 이상에서만 동작하니 주의하자!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;box&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;margin&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;padding&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;width&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;200&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* padding과 border값을 뺄 필요 없음 */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;border&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;solid&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;box-sizing&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;border-box&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;/* 추가 */&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div style=&#34;margin:10px auto;padding:10px;width:200px;background-color:#ddd;border:2px solid;text-align:center;box-sizing:border-box&#34;&gt;200 X 100&lt;br&gt;&lt;small&gt;Border box&lt;/small&gt;&lt;/div&gt;
▲ box-sizing 속성을 지정하지 않을 때와 똑같이 보여진다.
&lt;p&gt;&lt;img src=&#34;https://haneunbi.github.io/img/css-box_model_sample.png&#34; alt=&#34;개발자도구를 통해 확인해볼 수 있는 레이아웃&#34;&gt;
▲ CSS에서 콘텐츠의 너비를 200px로 지정했지만 알아서 패딩과 보더값을 뺀 176px로 그려진다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h4 id=&#34;box-sizing-속성-ie8&#34;&gt;box-sizing 속성 (IE8+)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;content-box: (기본값) width와 height 속성이 content의 너비와 높이의 길이로 설정&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;border-box&lt;/strong&gt;: width와 height 값이 padding, border, content를 합한 값으로 설정&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;번외-ie-박스-모델-버그&#34;&gt;번외) IE 박스 모델 버그&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://haneunbi.github.io/img/css-box_model.svg&#34; alt=&#34;W3C와 Internet Explorer 박스 모델 간의 너비 해석 방식의 차이점&#34;&gt;
[그림 2] W3C와 Internet Explorer 박스 모델 간의 너비 해석 방식의 차이점&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Internet Explorer의 초기 버전(&amp;lt;= IE6)은 &lt;a href=&#34;https://ko.wikipedia.org/wiki/%EC%BF%BC%ED%81%AC_%EB%AA%A8%EB%93%9C&#34;  title=&#34;위키 백과&#34;  target=&#34;_blank&#34; &gt;관용(쿼크) 모드&lt;/a&gt;일 때 박스 모델을 다르게 처리했다.
(지금의 &lt;em&gt;box-sizing: border-box&lt;/em&gt;로 지정한 것과 같이 width를 계산할 때 padding과 border를 포함한다.)&lt;br&gt;
&lt;em&gt;IE 박스 모델 버그&lt;/em&gt;인데, 웹표준이 중요한 현 시대에 DOCTYPE을 정의하지 않는 경우도 드물고 IE6는 2010년 3월 1일 장례식을 치뤘기에 CSS 핵이나 폴리필을 사용하면서까지 맞출 일은 드물테니 참고만 하자.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.mozilla.org/ko/docs/Web/CSS/CSS_Box_Model/Introduction_to_the_CSS_box_model&#34;  target=&#34;_blank&#34; &gt;(인용 출처) CSS 기본 박스 모델 입문 - CSS: Cascading Style Sheets | MDN&lt;/a&gt; &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/CSS_box_model&#34;  target=&#34;_blank&#34; &gt;(그림 출처) CSS box model | Wikipedia&lt;/a&gt; &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>[CSS] IR(Image Replacement) 기법</title>
      <link>https://haneunbi.github.io/2020/06/01/css-ir/</link>
      <pubDate>Mon, 01 Jun 2020 20:53:15 +0900</pubDate>
      
      <guid>https://haneunbi.github.io/2020/06/01/css-ir/</guid>
      <description>&lt;p&gt;웹 접근성 준수를 위해 이미지 사용 시 대체 텍스트를 제공해야 한다.&lt;br&gt;
단순히 &lt;a href=&#34;https://ko.wikipedia.org/wiki/%EC%8A%A4%ED%81%AC%EB%A6%B0_%EB%A6%AC%EB%8D%94&#34;  title=&#34;위키백과&#34;  target=&#34;_blank&#34; &gt;스크린 리더&lt;/a&gt; 사용자뿐 아니라 &lt;a href=&#34;https://support.google.com/webmasters/answer/7451184?hl=ko#images&#34;  title=&#34;검색엔진 최적화(SEO) 초보자 가이드 | Google&#34;  target=&#34;_blank&#34; &gt;검색 엔진의 효과적인 내용 수집&lt;/a&gt;을 위해서도 필수적이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;img&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/img/button.jpg&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;alt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;대체 텍스트&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;가장 간단하게는 위와 같이 img 태그 내 &lt;strong&gt;alt 속성&lt;/strong&gt;을 주는 것이겠지만
CSS background-image 속성을 사용하여 이미지를 넣는 경우도 상당수 차지하기 때문에 IR 기법에 대해 알아보자.
&lt;em&gt;(사실 그동안 어느정도 안다고 생각하며 깊게 고민하지 않고 사용했다..)&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;-bad---스크린-리더가-읽을-수-없는-방법&#34;&gt;👎 BAD - 스크린 리더가 읽을 수 없는 방법&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;hidden&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;display&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;none&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;화면에 표시되지 않고 스크린 리더가 읽을 수 없다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;hidden&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;visibility&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;hidden&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;화면에 표시되지 않으나 영역(width, height 등)은 차지한다. 스크린 리더가 읽을 수 없다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;hidden&lt;/span&gt; {
   &lt;span style=&#34;color:#66d9ef&#34;&gt;width&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
   &lt;span style=&#34;color:#66d9ef&#34;&gt;height&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
   &lt;span style=&#34;color:#66d9ef&#34;&gt;font-size&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
   &lt;span style=&#34;color:#66d9ef&#34;&gt;line-height&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;위와 같이 사이즈를 0으로 지정하는 방법 역시 스크린 리더가 읽을 수 없다.
&lt;br&gt;&lt;br&gt;
우리의 목표는 &lt;strong&gt;시각적으로 숨기지만 스크린 리더는 읽을 수 있어야&lt;/strong&gt; 하기 때문에 아래 방법으로 사용하자!&lt;/p&gt;
&lt;h1 id=&#34;-so-so&#34;&gt;👌 SO-SO&lt;/h1&gt;
&lt;h3 id=&#34;phark-method-기법&#34;&gt;Phark Method 기법&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;button&lt;/span&gt;&amp;gt;검색&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;button&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;button&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;text-indent&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;-9999&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;추가 태그도 필요없고 해상도의 범위(화면) 밖으로 텍스트만 날려버리는 가장 간단한 고전(?) 방법이다.
하지만 정상적으로 이미지가 로드되지 않은 상황에서 일반 사용자도 대체 텍스트를 확인할 수 없으며,
(요즘 디바이스 사양에서는 미미하겠지만) text-indent 속성이 적용된 요소가 많을 때 웹페이지 로드 시 위치값을 그만큼 많이 계산해야 하므로 성능 저하를 불러올 수 있는 단점이 있다.&lt;/p&gt;
&lt;h3 id=&#34;wa-ir-기법&#34;&gt;WA IR 기법&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;button&lt;/span&gt;&amp;gt;
    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;span&lt;/span&gt;&amp;gt;검색&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;span&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;button&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;button&lt;/span&gt; {
    &lt;span style=&#34;color:#75715e&#34;&gt;/* 이미지 버튼 속성 정의 */&lt;/span&gt;
}

&lt;span style=&#34;color:#f92672&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;span&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;position&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;relative&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;z-index&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;-1&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;추가 태그(span)를 사용하여 이미지 아래로 텍스트를 숨기는 기법이다.
이 방법 역시 적용된 요소가 많을수록 position 속성에 따른 성능 저하 이슈가 있다.&lt;/p&gt;
&lt;h1 id=&#34;-best&#34;&gt;👍 BEST&lt;/h1&gt;
&lt;p&gt;마지막으로 &lt;a href=&#34;https://html5boilerplate.com/&#34;  target=&#34;_blank&#34; &gt;H5BP(HTML5 Boilerplate)&lt;/a&gt;나 &lt;a href=&#34;https://getbootstrap.com/docs/4.0/utilities/screenreaders/&#34;  target=&#34;_blank&#34; &gt;부트스트랩&lt;/a&gt;에서 사용중인 최신 방법이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;sr-only&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;position&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;absolute&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* position: absolute/fixed 에서만 clip 속성 작동 */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;margin&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;-1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* 부트스트랩에선 안씀 */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;width&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;height&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;px&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;padding&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;border&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;white-space&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;nowrap&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;overflow&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;hidden&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;/* overflow: visible 이면 clip 속성 작동 안됨 */&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;clip&lt;/span&gt;: rect(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;clip-path&lt;/span&gt;: inset(&lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;%&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;/* H5BP에선 안씀 */&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;margin과 clip-path 속성을 제외하고 H5BP나 부트스트랩이나 나머지는 동일하다.&lt;/p&gt;
&lt;p&gt;0 사이즈를 피하고자 width와 height를 1px을 준다.
하지만 1px의 공간으로는 텍스트의 공백과 줄바꿈의 계산되지 않기 때문에 (공백은 1개만 표시하고 줄바꿈은 되지 않는) white-space: nowrap으로 정의한다.
&lt;em&gt;(스크린 리더가 줄바꿈은 공백으로 해석하지 않아 띄어쓰기가 되지 않은 하나의 긴 단어처럼 읽어준다고 한다. &lt;a href=&#34;https://medium.com/@jessebeach/beware-smushed-off-screen-accessible-text-5952a4c2cbfe&#34;  target=&#34;_blank&#34; &gt;관련 링크&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;참고&#34;&gt;참고&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://css-tricks.com/the-image-replacement-museum/&#34;  target=&#34;_blank&#34; &gt;The Image Replacement Museum | CSS-Tricks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://nuli.navercorp.com/community/article/1132804?email=true&#34;  target=&#34;_blank&#34; &gt;스크린리더 사용자를 위한 IR(Image Replacement)기법과 추가 설명 제공하기 | 널리&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ui.daum.net/convention/css/css_ir&#34;  target=&#34;_blank&#34; &gt;IR 기법 | 다룸&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>[Vue.js] Todo List 만들기</title>
      <link>https://haneunbi.github.io/2020/05/08/vue-todolist/</link>
      <pubDate>Fri, 08 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://haneunbi.github.io/2020/05/08/vue-todolist/</guid>
      <description>&lt;p&gt;Vue.js를 이용하여 Todo List를 만들었다.&lt;br&gt;
Vue나 React 배우기를 더 이상 미뤄서는 안될 것 같고 일단 html 템플릿을 그대로 활용하는 Vue가 익숙할 것 같아 Vue를 선택했다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Vue로 만든 Todo&lt;/strong&gt;&lt;br&gt;
&lt;a href=&#34;https://github.com/haneunbi/vue-todolist&#34;  target=&#34;_blank&#34; &gt;GitHub Repo&lt;/a&gt; / &lt;a href=&#34;https://haneunbi.github.io/vue-todolist&#34;  target=&#34;_blank&#34; &gt;GitHub Page&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;jQuery로 만든 Todo (이 형태를 기본으로 Vue로 변환)&lt;br&gt;
&lt;a href=&#34;https://github.com/haneunbi/todolist&#34;  target=&#34;_blank&#34; &gt;GitHub Repo&lt;/a&gt; / &lt;a href=&#34;https://haneunbi.github.io/todolist&#34;  target=&#34;_blank&#34; &gt;GitHub Page&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;작업 내내 jQuery 타성에 젖어버린 나의 머릿속은 대체 왜 Vue를 써야 하는 건지 물음표 투성이었다.&lt;br&gt;
컴포넌트(Component)의 장점도 알겠고 별도 js 파일에서 분리 조작이 아닌 html 태그 내에서의 DOM 조작과 데이터 바인딩이 분명 흥미롭긴 한데 정말 효과적인지는 의문이다.&lt;br&gt;
컴포넌트 간 데이터 전달도 번거롭고 빌드도 해야하고.. 다 익숙하지 않은 탓이겠지.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;하위 컴포넌트 → &lt;strong&gt;event&lt;/strong&gt; → 상위 컴포넌트&lt;br&gt;
상위 컴포넌트 → &lt;strong&gt;props&lt;/strong&gt; → 하위 컴포넌트&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;그래도 오랜만에 새로움이 작동되는 희열을 느꼈다.&lt;br&gt;
(나도 코드 삽입해서 설명하고 싶은데 아직 스스로도 정리가 덜 돼서 회고에 가까운 기록으로 대체)&lt;/p&gt;
&lt;h2 id=&#34;참고&#34;&gt;참고&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://kr.vuejs.org/v2/guide/index.html&#34;  target=&#34;_blank&#34; &gt;Vue.js 공식 문서&lt;/a&gt; (I ❤ 한글)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kr.vuejs.org/v2/examples/todomvc.html&#34;  target=&#34;_blank&#34; &gt;Vue.js 공식 문서 - Todo 예시&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>기술 블로그 시작하기</title>
      <link>https://haneunbi.github.io/2020/04/29/start-blog/</link>
      <pubDate>Wed, 29 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://haneunbi.github.io/2020/04/29/start-blog/</guid>
      <description>&lt;p&gt;기술 블로그를 만들어야지 싶어 몇년 전부터 *&lt;strong&gt;.github.io&lt;/strong&gt; 블로그를 만들었다 지웠다를 반복했다.&lt;/p&gt;
&lt;p&gt;기존 플랫폼은 이용하고 싶지 않아 깃허브(GitHub)를 이용한 정적 페이지를 만들기로는 정했는데 어떠한 블로그 프레임워크로 할 것인지는 정하지 못했다. 처음에는(2017년) 깃허브 블로그하면 가장 유명한 지킬(Jekyll)을 사용해서 만들어만 두었다. 그리고 잊고 있다가 다시금 생각나 알아보니 당시엔(2018년) 지킬보단 헥소(Hexo)가 뜨고있다하여(?) 바꿨다. 물론 이때도 만들어만 두고 사용은 안했다..😅&lt;/p&gt;
&lt;p&gt;그러다가 최근에(2020년) 다시 보니 휴고(Hugo)가 새롭게 등장해 있길래 혼자서 온갖 시행착오를 겪어가며 나름의 커스터마이징도 끝내놓고 보니 뷰프레스(VuePress)가 있다는 걸 알게 됐다. 안그래도 Vue를 공부해야지 하는 찰나에 쓰면 좋겠다 싶어서 또 다시 바꿔봤는데 이게 Hugo보다 속도가 느려서 당장 테스트 서버를 돌리는데도 답답하더라. 아무튼 다시 Hugo로 돌아왔고 이제부턴 방치하지 않고 시작해볼까 한다.&lt;/p&gt;
&lt;h2 id=&#34;회고&#34;&gt;회고&lt;/h2&gt;
&lt;p&gt;내가 아는 건 자바스크립트 정도에 CLI도 어색하고 각각의 베이스 언어들도 접해보지 않은 상태라 솔직히 하나하나 만들 때마다 헤맸다.
결과적으로 Go나 Vue의 컴포넌트 개념을 살짝 훑어봤고, 빠른 배포나 글쓰기를 위한 초간단 쉘 스크립트도 작성해보는 기회가 되었다.&lt;/p&gt;
&lt;h2 id=&#34;참고&#34;&gt;참고&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jekyllrb.com/&#34;  target=&#34;_blank&#34; &gt;Jekyll (Ruby)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hexo.io/ko/index.html&#34;  target=&#34;_blank&#34; &gt;Hexo (Node.js)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/&#34;  target=&#34;_blank&#34; &gt;Hugo (Go)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://vuepress.vuejs.org/&#34;  target=&#34;_blank&#34; &gt;VuePress (Vue.js)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/&#34;  target=&#34;_blank&#34; &gt;Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/&#34;  target=&#34;_blank&#34; &gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>javascript on B.log</title>
    <link>https://haneunbi.github.io/tags/javascript/</link>
    <description>B.log (javascript)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-KR</language>
    <lastBuildDate>Tue, 16 Feb 2021 19:57:01 +0900</lastBuildDate>
    
    <atom:link href="https://haneunbi.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[JavaScript] 클로저(Closure)란 무엇인가?</title>
      <link>https://haneunbi.github.io/2021/02/16/2021-02-16-closure/</link>
      <pubDate>Tue, 16 Feb 2021 19:57:01 +0900</pubDate>
      
      <guid>https://haneunbi.github.io/2021/02/16/2021-02-16-closure/</guid>
      <description>&lt;p&gt;지금까지 클로저의 개념에 대해 몇번을 봤는지 모르겠다.&lt;br&gt;
그때마다 정확히 이해했다기 보다는 대충 감만 잡는 느낌이었는데 오늘은 기필코 이해해 보려 한다!&lt;/p&gt;
&lt;h2 id=&#34;클로저closure의-정의&#34;&gt;클로저(Closure)의 정의&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;클로저는 함수와 함수가 선언된 렉시컬 환경(Lexical environment)의 조합이다. &lt;em&gt;- MDN&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;당최 무슨 말인가.. 😑&lt;/p&gt;
&lt;p&gt;Closure의 사전적 정의는 &lt;strong&gt;폐쇄&lt;/strong&gt;다.&lt;br&gt;
클로저를 찾아 보면 렉시컬 환경(Lexical environment), 렉시컬 스코프(Lexical scope)란 말이 자주 등장하는데
클로저를 이해하기 전에 먼저 렉시컬 스코프에 대해 살펴보자.&lt;/p&gt;
&lt;h3 id=&#34;렉시컬-스코프lexical-scope&#34;&gt;렉시컬 스코프(Lexical scope)&lt;/h3&gt;
&lt;p&gt;전역 스코프(Global scope)와 지역 스코프(Local scope)는 알겠는데,
렉시컬 스코프(Lexical scope)란 무엇이더냐..&lt;/p&gt;
&lt;p&gt;우리가 변수나 함수를 &lt;strong&gt;어디에 선언&lt;/strong&gt;하는 지에 따라 전역 스코프와 지역 스코프가 결정되는데,
이렇게 구성된 스코프를 &lt;strong&gt;렉시컬 스코프&lt;/strong&gt;라고 한다. &lt;em&gt;= 정적 스코프(Static scope)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;함수를 선언할 때 함수 내부의 변수는 &lt;strong&gt;자기 스코프로부터 가장 가까운 상위 변수를 계속 참조&lt;/strong&gt;하게 된다.&lt;br&gt;
아래 예제를 보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;() {
  &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;;
  &lt;span style=&#34;color:#a6e22e&#34;&gt;bar&lt;/span&gt;(); &lt;span style=&#34;color:#75715e&#34;&gt;// foo 함수 내부에서 bar 함수 호출
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bar&lt;/span&gt;() {
  &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;);
}

&lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;(); &lt;span style=&#34;color:#75715e&#34;&gt;// 5 (10 아님)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bar&lt;/span&gt;(); &lt;span style=&#34;color:#75715e&#34;&gt;// 5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;▲ foo 함수 내부에서 bar 함수를 호출했지만 bar 함수가 &lt;strong&gt;선언&lt;/strong&gt;된 &lt;strong&gt;전역&lt;/strong&gt;에서 변수(x)를 찾아 출력한다.&lt;br&gt;
즉, 렉시컬 스코프는 함수를 어디서 호출하는지가 아니라 &lt;strong&gt;어디에 선언&lt;/strong&gt;하였는지에 따라 결정된다.&lt;/p&gt;
&lt;p&gt;이렇듯 렉시컬 스코프는 특별한 개념이 아니라 우리가 당연하다 생각하며 개발한 것이다.&lt;br&gt;
그럼 다시 클로저로 돌아와 아래 예제를 살펴보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;outer&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;;
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;inner&lt;/span&gt;() {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// 자신의 스코프 내 x가 없기 때문에 상위 스코프에서 x를 찾아 출력한다.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    };

    &lt;span style=&#34;color:#a6e22e&#34;&gt;inner&lt;/span&gt;();
}

&lt;span style=&#34;color:#a6e22e&#34;&gt;outer&lt;/span&gt;(); &lt;span style=&#34;color:#75715e&#34;&gt;// 10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;▲ inner 함수는 &lt;strong&gt;outer 함수 안에서 선언되고 호출&lt;/strong&gt;된다.&lt;/p&gt;
&lt;p&gt;간단한 위의 예제를 아래처럼 바꿔보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;outer&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;;
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;inner&lt;/span&gt;() {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;);
    };

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;inner&lt;/span&gt;;
}

&lt;span style=&#34;color:#a6e22e&#34;&gt;outer&lt;/span&gt;(); &lt;span style=&#34;color:#75715e&#34;&gt;// ƒ inner() { console.log(x); }
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;closure&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;outer&lt;/span&gt;();
&lt;span style=&#34;color:#a6e22e&#34;&gt;closure&lt;/span&gt;(); &lt;span style=&#34;color:#75715e&#34;&gt;// 10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;▲ closure 함수가 참조하고 있는 outer 함수를 호출해보면 &lt;strong&gt;inner 함수 자체를 반환&lt;/strong&gt;하는 것을 볼 수 있다.&lt;br&gt;
&lt;em&gt;(이것만 보면 outer 함수의 지역 변수인 x=10은 쓸모가 없어 보인다.)&lt;/em&gt;
그럼 전역 스코프에서 호출된 closure 함수는 전역 변수의 x를 찾아 5를 출력할 것 같은데, 지역 변수인 10을 출력한다(?!)&lt;/p&gt;
&lt;p&gt;부모 함수에서 내부 함수를 외부로 리턴하면, 부모 함수 밖에서도 내부 함수를 호출하는 것이 가능하다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;즉, 클로저란 함수 내부에 &lt;strong&gt;선언&lt;/strong&gt;된 함수가 &lt;strong&gt;호출&lt;/strong&gt;될 때 외부 변수에 접근하기 위한 객체이다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;그래서-클로저는-어디에-쓰일까&#34;&gt;그래서 클로저는 어디에 쓰일까?&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;클로저를 사용하면 객체지향 프로그래밍의 &lt;strong&gt;캡슐화&lt;/strong&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;와 &lt;strong&gt;정보 은닉&lt;/strong&gt;&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;같은 이점을 얻을 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;이 말도 나에겐 너무나 추상적인 말이다..&lt;br&gt;
사실 이 클로저의 활용 부분이 명확하지 않아 지금까지 클로저를 제대로 이해하지 못했다.&lt;/p&gt;
&lt;h3 id=&#34;전역-변수를-피하자&#34;&gt;전역 변수를 피하자!&lt;/h3&gt;
&lt;p&gt;초보 개발자도 전역 변수의 사용을 자제하라는 말은 많이 들어봤을 것이다.&lt;/p&gt;
&lt;p&gt;변하지 않고 항상 같은 값을 가지는 상수(const)는 괜찮지만 비-상수(non-const)는 전역 변수를 피해야 한다.
전역 변수는 언제 어디서 누구나 접근할 수 있고 값이 변경될 위험이 있기 때문이다.&lt;/p&gt;
&lt;p&gt;여기서 클로저를 사용하면 된다. (=정보 은닉)&lt;/p&gt;
&lt;h4 id=&#34;지역-변수를-사용한-카운터-x&#34;&gt;지역 변수를 사용한 카운터 (X)&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;counter&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;( &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt; );
}

&lt;span style=&#34;color:#a6e22e&#34;&gt;counter&lt;/span&gt;(); &lt;span style=&#34;color:#75715e&#34;&gt;// 실행 시마다 count 변수가 초기화되어 언제나 1이 출력된다.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;전역-변수를-사용한-카운터-&#34;&gt;전역 변수를 사용한 카운터 (△)&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;counter&lt;/span&gt;() {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;( &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt; );
}

&lt;span style=&#34;color:#a6e22e&#34;&gt;counter&lt;/span&gt;(); &lt;span style=&#34;color:#75715e&#34;&gt;// 실행 시마다 1씩 증가한다. 전역 변수의 오염 위험
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;클로저를-사용한-카운터-o&#34;&gt;클로저를 사용한 카운터 (O)&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;counter&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;() {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;() { &lt;span style=&#34;color:#75715e&#34;&gt;// 클로저 함수
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;( &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;count&lt;/span&gt; );
    }
})();

&lt;span style=&#34;color:#a6e22e&#34;&gt;counter&lt;/span&gt;(); &lt;span style=&#34;color:#75715e&#34;&gt;// count 변수의 오염 걱정없이 1씩 증가한다.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;▲ 클로저를 이용하면 지역 변수인 count가 0으로 초기화되지 않고 유지됨을 볼 수 있다.&lt;/p&gt;
&lt;p&gt;일반적인 함수는 선언할때 마다 내부의 변수가 초기화되지만, 클로저(내부) 함수는 선언했을 때의 렉시컬 환경을 기억하고 있다.
따라서 외부 함수의 변수 count에 접근할 수 있고, 변수 count는 자신을 참조하는 함수가 소멸될 때가지 유지된다.
&lt;em&gt;참고로 클로저는 외부 함수의 변수에 마지막으로 저장된 값만(!) 알 수 있다.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;count 변수는 &lt;strong&gt;외부에서 직접 접근할 수 없는 private 변수이므로 오류 발생을 피하고 프로그램의 안전성을 높인다.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;반대로 생각하면 원래는 소멸됐어야 할(가비지 컬렉션) 변수가 메모리상에 남아있는 것이기 때문에 클로저의 오용이나 남발을 피해야 한다.&lt;/p&gt;
&lt;h3 id=&#34;참고&#34;&gt;참고&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Closures&#34;  target=&#34;_blank&#34; &gt;클로저 - JavaScript | MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://poiemaweb.com/js-closure&#34;  target=&#34;_blank&#34; &gt;Closure | PoiemaWeb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://meetup.toast.com/posts/86&#34;  target=&#34;_blank&#34; &gt;자바스크립트의 스코프와 클로저 : TOAST Meetup&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;데이터와 (데이터를 처리하는) 함수의 묶음 (캡슐화＞정보은닉, 캡슐화≠정보은닉) &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;(캡슐화된) 데이터와 함수를 외부에 노출시키지 않고 내부에 숨김 &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
    <item>
      <title>[JavaScript] Vanilla JS</title>
      <link>https://haneunbi.github.io/2020/06/16/vanilla-js/</link>
      <pubDate>Tue, 16 Jun 2020 20:25:10 +0900</pubDate>
      
      <guid>https://haneunbi.github.io/2020/06/16/vanilla-js/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://vanilla-js.com/&#34;  target=&#34;_blank&#34; &gt;Vanilla JS&lt;/a&gt;는 별도 프레임워크나 라이브러리없이 순수 자바스크립트(0Byte)를 사용하는 것을 의미한다.&lt;br&gt;
&amp;lsquo;바닐라&#39;라는 단어에는 &amp;lsquo;평범한, 특별할 것 없는&#39;이라는 뜻도 내포하고 있다.&lt;/p&gt;
&lt;p&gt;몇 년 새 &lt;a href=&#34;https://ko.reactjs.org/&#34;  title=&#34;2013년, Jordan Walke&#34;  target=&#34;_blank&#34; &gt;React&lt;/a&gt;와 &lt;a href=&#34;https://kr.vuejs.org/&#34;  title=&#34;2014년, Evan You&#34;  target=&#34;_blank&#34; &gt;Vue.js&lt;/a&gt;가 급부상하며 jQuery 의존도를 낮추는 추세고,
&lt;strong&gt;.getElement(s)By어쩌고()&lt;/strong&gt; 에서 &lt;strong&gt;.querySelector()&lt;/strong&gt; 메소드가 나옴으로써 상대적으로 DOM 접근도 쉬워졌다.&lt;/p&gt;
&lt;p&gt;하지만 IE 사용률이 높은 국내 환경에서는 호환성을 위해서라도 jQuery는 아직도 활발히 이용되고 있고,
공공기관이나 회사의 서비스가 2006년&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; 이전에 런칭된 상태라면 (비효율적이지만) 가능한 IE7까지도 콘텐츠 이용에 무리가 없어야 한다.
(라지만 현실적으론 최하 IE9가 맞다고 본다..)&lt;/p&gt;
&lt;p&gt;어쨌든 실제 나도 현업에선 IE7까지 맞춰야 하는 실정이지만
단순히 DOM에 접근하기 쉽다는 이유만으로 jQuery를 고수하기에도 &amp;lsquo;어쩔 수 없음을 가장한 회피&#39;같아서
당장 자주 쓰는 기본 메소드 위주로 정리하고자 한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;$&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#test&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// jQuery
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
document.&lt;span style=&#34;color:#a6e22e&#34;&gt;getElementById&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;test&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// JavaScript
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;내가 jQuery를 사용한 이유는 1차원적으로 CSS 스타일의 선택자 때문이었다.
id고 class고 tag name을 가리지 않는 만능 선택자 $()를 두고 길기만 한 document.getElementById를 쓰고 싶지 않았다.
물론 $를 한번 호출할 때마다 성능 저하를 깨닫고부터는 아래와 같이 가능한 변수에 담아두고 쓰거나 최적의 선택자를 쓰도록 노력했다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;window.&lt;span style=&#34;color:#a6e22e&#34;&gt;jQuery&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; window.&lt;span style=&#34;color:#a6e22e&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;jQuery&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;▲ jQuery에서 $란? jQuery 그 자체! jQuery() = $()&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;$this&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;$&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;);

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;$this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;hasClass&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;open&amp;#39;&lt;/span&gt;)){
    &lt;span style=&#34;color:#a6e22e&#34;&gt;$this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;removeClass&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;open&amp;#39;&lt;/span&gt;);
}&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;{
    &lt;span style=&#34;color:#a6e22e&#34;&gt;$this&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;addClass&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;open&amp;#39;&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;▲ 스코프 내에서 여러번 쓰일 경우 한번만 호출하여 변수에 담아 쓰자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;$&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.list li&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// 후손 선택자
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;$&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.list&amp;#39;&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;find&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;li&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// Traversing
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;▲ 후손 선택자보다 Traversing 방식이 빠르다.&lt;/p&gt;
&lt;h2 id=&#34;이벤트dom-리소스-로드-관련&#34;&gt;이벤트(DOM, 리소스 로드 관련)&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// jQuery
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;$&lt;/span&gt;(document).&lt;span style=&#34;color:#a6e22e&#34;&gt;ready&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(){ &lt;span style=&#34;color:#75715e&#34;&gt;// = $(function(){
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 실행 코드
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;});

&lt;span style=&#34;color:#75715e&#34;&gt;// JavaScript
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;document.&lt;span style=&#34;color:#a6e22e&#34;&gt;addEventListener&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;DOMContentLoaded&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(){ &lt;span style=&#34;color:#75715e&#34;&gt;// IE9+
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// 실행 코드
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;▲ 외부 리소스(css, js, images, iframe 등)와 상관없이 DOM이 로드된 직후 실행&lt;br&gt;
JavaScript의 .addEventListener()는 IE9 이상에서만 작동하는 점을 유의하자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// jQuery
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;$&lt;/span&gt;(window).&lt;span style=&#34;color:#a6e22e&#34;&gt;load&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(){
    &lt;span style=&#34;color:#75715e&#34;&gt;// 실행 코드
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;});

&lt;span style=&#34;color:#75715e&#34;&gt;// JavaScript
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;window.&lt;span style=&#34;color:#a6e22e&#34;&gt;onload&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt;(){
    &lt;span style=&#34;color:#75715e&#34;&gt;// 실행 코드
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;▲ 화면의 모든 콘텐츠(css, script, images, iframe 등)가 구성된 이후 실행&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;document.ready() &amp;gt; window.load() &amp;gt; body onload 순서로 실행된다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;dom-선택자selector&#34;&gt;DOM 선택자(Selector)&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// jQuery
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;$&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#id&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// id 선택자
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;$&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.class&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// class 선택자
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;$&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;div&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// element(tag name) 선택자
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;$&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#id, .class&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// 다중 선택자
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;// JavaScript
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;document.&lt;span style=&#34;color:#a6e22e&#34;&gt;getElementById&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// IE5.5+
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;document.&lt;span style=&#34;color:#a6e22e&#34;&gt;getElementsByClassName&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;class&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// IE9+
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;document.&lt;span style=&#34;color:#a6e22e&#34;&gt;getElementsByTagName&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;div&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// IE5.5+
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
document.&lt;span style=&#34;color:#a6e22e&#34;&gt;querySelector&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#id&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// IE8+
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;document.&lt;span style=&#34;color:#a6e22e&#34;&gt;querySelector&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.class&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// IE8+ (첫 번째 element의 Node)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
document.&lt;span style=&#34;color:#a6e22e&#34;&gt;querySelectorAll&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.class&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// IE8+ (해당 elements의 NodeList)
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;document.&lt;span style=&#34;color:#a6e22e&#34;&gt;querySelectorAll&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.class1, .class2&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// 다중 선택자
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;▲ 자바스크립트의 .querySelector()가 나오면서 선택자가 편해졌다.
하지만 &lt;strong&gt;jQuery는 jQuery 객체를 반환&lt;/strong&gt;하고, &lt;strong&gt;JavaScript는 Native JavaScript 객체를 반환&lt;/strong&gt;하기 때문에
jQuery처럼 이벤트를 걸면 동작하지 않는 경우가 있다. &lt;em&gt;(이 부분은 차후 포스팅!)&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;.getElementById()가 .querySelector()보다 빠르다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;메소드&#34;&gt;메소드&lt;/h2&gt;
&lt;h3 id=&#34;addclass-removeclass-toggleclass-hasclass&#34;&gt;.addClass(), removeClass(), toggleClass(), hasClass()&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// jQuery
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;$target&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;$&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#test&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#a6e22e&#34;&gt;$target&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;addClass&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;active&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;$target&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;removeClass&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;active&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;$target&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;toggleClass&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;active&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;$target&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;hasClass&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;active&amp;#39;&lt;/span&gt;)){
    &lt;span style=&#34;color:#a6e22e&#34;&gt;alert&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;active 존재!&amp;#39;&lt;/span&gt;);
}

&lt;span style=&#34;color:#75715e&#34;&gt;// JavaScript
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; document.&lt;span style=&#34;color:#a6e22e&#34;&gt;querySelector&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#test&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// IE8+
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;classList&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;add&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;active&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// classList IE10+ 부분적 지원
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;classList&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;remove&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;active&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;classList&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;toggle&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;active&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// 두번째 인자(boolean 타입)는 옵션으로 true시 class 추가, false시 class 삭제, i &amp;lt; 10과 같은 &amp;#39;조건 표현식&amp;#39;도 가능
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;classList&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;contains&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;active&amp;#39;&lt;/span&gt;)){
     &lt;span style=&#34;color:#a6e22e&#34;&gt;alert&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;active 존재!&amp;#39;&lt;/span&gt;);
}
&lt;span style=&#34;color:#75715e&#34;&gt;// or
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;className&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;active&amp;#39;&lt;/span&gt;){
     &lt;span style=&#34;color:#a6e22e&#34;&gt;alert&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;active 존재!&amp;#39;&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;active foo bar&amp;#34;&lt;/span&gt;&amp;gt;class 여러개&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;

&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;active&amp;#34;&lt;/span&gt;&amp;gt;class 하나&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;▲ class가 여러개 지정된 상태 중 active를 찾아야 하면, &lt;strong&gt;.classList.contains()&lt;/strong&gt;&lt;br&gt;
class가 하나만 지정된 상태라면 &lt;strong&gt;.className&lt;/strong&gt; 사용 가능&lt;/p&gt;
&lt;h3 id=&#34;append&#34;&gt;.append()&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// jQuery
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;$target&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;$&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#test&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;element&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;lt;span&amp;gt; (Add Element)&amp;lt;/span&amp;gt;&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#a6e22e&#34;&gt;$target&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;append&lt;/span&gt;( &lt;span style=&#34;color:#a6e22e&#34;&gt;element&lt;/span&gt; );

&lt;span style=&#34;color:#75715e&#34;&gt;// JavaScript
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; document.&lt;span style=&#34;color:#a6e22e&#34;&gt;querySelector&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#test&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// IE8+
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;element&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; document.&lt;span style=&#34;color:#a6e22e&#34;&gt;createElement&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;span&amp;#39;&lt;/span&gt;)

&lt;span style=&#34;color:#a6e22e&#34;&gt;element&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;innerHTML&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39; (Add Element)&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;appendChild&lt;/span&gt;( &lt;span style=&#34;color:#a6e22e&#34;&gt;element&lt;/span&gt; );
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;스타일&#34;&gt;스타일&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// jQuery
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;$target&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;$&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#test&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;$target&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;css&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;color&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;green&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;// JavaScript
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; document.&lt;span style=&#34;color:#a6e22e&#34;&gt;querySelector&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#test&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// IE8+
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;target&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;style&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;color&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;green&amp;#39;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;정리&#34;&gt;정리&lt;/h2&gt;
&lt;p&gt;jQuery 의존도를 낮춰주는 .querySelector(), .addEventListener(), .classList 등을 모두 사용하기 위해서는 IE10 이상이어야 한다.
신규 프로젝트는 괜찮지만 하위 브라우저까지 지원해야 하는 기존 프로젝트에는 적용이 어렵다. 당장은 jQuery 못잃어..😭&lt;/p&gt;
&lt;h3 id=&#34;참고&#34;&gt;참고&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/ko/docs/Web/API/EventTarget/addEventListener&#34;  target=&#34;_blank&#34; &gt;EventTarget.addEventListener() | MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/ko/docs/Web/API/Document/getElementById&#34;  target=&#34;_blank&#34; &gt;Document.getElementById() | MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/ko/docs/Web/API/Document/getElementsByClassName&#34;  target=&#34;_blank&#34; &gt;Document.getElementsByClassName() | MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/ko/docs/Web/API/Document/querySelector&#34;  target=&#34;_blank&#34; &gt;Document.querySelector() | MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll&#34;  target=&#34;_blank&#34; &gt;Document.querySelectorAll() | MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Element/classList&#34;  target=&#34;_blank&#34; &gt;Element.classList | MDN&lt;/a&gt;
&lt;pre&gt;&lt;code&gt;1. Does not have support for classList on SVG or MathML elements.
2. Does not support the second parameter for the toggle method
3. Does not support multiple parameters for the add() &amp;amp; remove() methods
4. Does not support assign to classList or the replace() method
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/ko/docs/Web/API/Element/className&#34;  target=&#34;_blank&#34; &gt;Element.className | MDN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/Events&#34;  target=&#34;_blank&#34; &gt;Event reference | MDN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;윈도우 인터넷 익스플로러 7(Windows Internet Explorer 7, IE7)은 2006년 10월 18일에 공개한 웹 브라우저로 윈도우 XP, 윈도우 서버 2003, 윈도우 서버 2003 R2, 윈도우 비스타를 지원한다. 2009년 3월 19일부터는 인터넷 익스플로러 8으로 대체되었다. 인터넷 익스플로러 6(IE6)은 2001년 8월 27일에 출시 2014년 4월 8일 윈도우 XP의 지원이 중단되었다. 구글은 2010년 2월 28일부터 IE6의 일부 지원을 중단하였으며 &lt;a href=&#34;https://news.naver.com/main/read.nhn?mode=LSD&amp;amp;mid=sec&amp;amp;sid1=105&amp;amp;oid=138&amp;amp;aid=0001988169&#34;  title=&#34;기사 바로가기&#34;  target=&#34;_blank&#34; &gt;국내 포털, 게임 사이트&lt;/a&gt;들도 2012년 이후부터는 IE6 지원을 중단하였다. (장례식은 2010년 3월 1일, R.I.P.) &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
  </channel>
</rss>